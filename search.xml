<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Navicat15注册激活教程</title>
      <link href="2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/"/>
      <url>2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<center style="font-size: 26px;font-weight: bolder;">Navicat15注册激活教程</center><p>最新Navicat15破解教程，亲测可用！</p><h3 id="1、下载Navicat-Premium"><a href="#1、下载Navicat-Premium" class="headerlink" title="1、下载Navicat Premium"></a>1、下载Navicat Premium</h3><p>官网<a href="https://www.navicat.com.cn/%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85([%E4%B8%8A%E6%96%B9%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD](https://www.lanzous.com/b05xtohnc)%EF%BC%8C%E6%9C%8964%E4%BD%8D%E5%AE%89%E8%A3%85%E5%8C%85%E5%92%8C%E6%B3%A8%E5%86%8C%E6%9C%BA%E4%B8%8B%E8%BD%BD">https://www.navicat.com.cn/下载最新版本下载安装([上方网盘下载](https://www.lanzous.com/b05xtohnc)，有64位安装包和注册机下载</a>)</p><h3 id="2、激活Navicat-Premium"><a href="#2、激活Navicat-Premium" class="headerlink" title="2、激活Navicat Premium"></a>2、激活Navicat Premium</h3><p>下载激活软件， 无需断网运行激活软件Navicat_Keygen_Patch 5.6（以管理员身份运行）</p><p><img src="/2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/1.png"></p><p>点击Path替换navicat.exe</p><p>显示下图才是成功</p><p><img src="/2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/2.png"></p><p>显示下图，则是以前破解失败 残留的文件 要去软件安装路径下找到下图2个文件删除</p><p><img src="/2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/3.png"></p><p><img src="/2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/4.png"></p><p>点击确定，接下来修改注册信息生成注册码</p><p><img src="/2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/5.png"></p><p>运行软件将生成的注册码填入软件</p><p><img src="/2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/6.png"></p><p>点击注册，将注册码复制进注册框</p><p><img src="/2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/7.png"></p><p>点击激活，选择手动激活</p><p><img src="/2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/8.png"></p><p>将请求码复制到激活软件生成激活码</p><p><img src="/2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/9.png"></p><p>将生成的激活码复制到软件激活框激活</p><p><img src="/2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/10.png"></p><p>查看激活</p><p><img src="/2021/03/01/navicat15-zhu-ce-ji-huo-jiao-cheng/11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 连接工具 </tag>
            
            <tag> Navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用深度学习和机器学习预测股票市场</title>
      <link href="2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/"/>
      <url>2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/</url>
      
        <content type="html"><![CDATA[<center style="font-size: 26px;font-weight: bolder;">利用深度学习和机器学习预测股票市场（附代码）</center><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;预测股市将如何变化历来是最困难的事情之一。这个预测行为中包含着如此之多的因素—包括物理或心理因素、理性或者不理性行为因素等等。所有这些因素结合在一起，使得股价波动剧烈，很难准确预测。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;使用机器学习可能改变游戏规则吗？机器学习技术使用最新的组织公告、季度收益等作为特征，有潜力挖掘出我们以前没有见过的模式和见解，并可用于准确无误的预测。</p><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/1.png"></p><p>在本文中，我们将研究上市公司股价的历史数据。我们将结合机器学习算法来预测这家公司的未来股价，从平均和线性回归这样的简单算法开始，然后转向像Auto ARIMA和LSTM这样的高级模型。</p><p>本文背后的核心思想是展示这些算法是如何实现的，因此我只会简单描述该技术并提供相关参考链接，以便在必要时对这些概念进行复习。如果您是时间序列领域的新手，我建议您先阅读以下文章:</p><ul><li>创建时间序列预测的初学者综合指南</li><li>时间序列建模的完整教程</li></ul><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ol><li><p>问题理解</p></li><li><p>移动平均</p></li><li><p>线性回归</p></li><li><p>K-近邻</p></li><li><p>自动ARIMA</p></li><li><p>先知（Prophet）</p></li><li><p>长短时记忆网络（LSTM）</p></li></ol><h3 id="1、问题理解"><a href="#1、问题理解" class="headerlink" title="1、问题理解"></a>1、问题理解</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们将很快深入本文的实现部分，但首先重要的是确定我们要解决的问题。一般来说，股票市场分析分为两个部分——基本面分析和技术分析。</p><ul><li><p>基本面分析是根据公司目前的经营环境和财务状况，对公司未来的盈利能力进行分析。</p></li><li><p>技术分析包括阅读图表和使用统计数字来确定股票市场的趋势。</p></li></ul><p>您可能已经猜到，我们的重点将放在技术分析部分。我们将使用来自Quandl的数据集(您可以在这里找到各种股票的历史数据)，这个项目中，我使用了“塔塔全球饮料”的数据。是时候开始了!</p><p>首先让我们加载数据集，定义问题的目标变量:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#import packages</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true">#to plot within notebook</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token operator">%</span>matplotlib inline<span class="token comment" spellcheck="true">#setting figure size</span><span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pylab <span class="token keyword">import</span> rcParamsrcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token comment" spellcheck="true">#for normalizing data</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> MinMaxScalerscaler <span class="token operator">=</span> MinMaxScaler<span class="token punctuation">(</span>feature_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#read the file</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'NSE-TATAGLOBAL(1).csv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print the head</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/2.png"></p><p>数据集中有多个变量——日期（date）、开盘价(open)、最高价(high)、最低价(low)、最后交易价(last)、收盘价(close)、总交易额(total_trade_quantity)和营业额(turnover)。</p><ul><li><p>开盘价和收盘价代表股票在某一天交易的起始价和最终价。</p></li><li><p>最高价、最低价和最后交易价表示当天股票的最高价、最低价和最后交易价格。</p></li><li><p>交易总量是指当天买卖的股票数量，而营业额(Lacs)是指某一特定公司在某一特定日期的营业额。</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;要注意的另一点是，市场在周末和公共假期休市。注意上表缺失了一些日期值——2/10/2018、6/10/2018、7/10/2018。其中2号是国庆节，6号和7号是周末。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;损益的计算通常由股票当日的收盘价决定，因此我们将收盘价作为目标变量。让我们画出目标变量来理解它在我们的数据集中的分布:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#setting index as date</span>df<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">.</span>Date<span class="token punctuation">,</span>format<span class="token operator">=</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>index <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#plot</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Close Price history'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/3.png"></p><p>在接下来的部分中，我们将探索这些变量，并使用不同的技术来预测股票的每日收盘价。</p><h3 id="2、移动平均"><a href="#2、移动平均" class="headerlink" title="2、移动平均"></a>2、移动平均</h3><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;“平均数”是我们日常生活中最常用的统计量之一。例如，计算平均分数来确定整体表现，或者根据过去几天的平均温度来了解今天的温度——这些都是我们经常做的日常工作。因此，使用这个方法开始用数据集进行预测是个不错的选择。</p><p>我们利用一组先前观测值的平均值作为每天的预期收盘价。我们将使用移动平均法，而不是使用简单的平均值，移动平均法使用最近的一组数据计算预测值。换句话说，对于后续的每个新的时间，在考虑预测值时，将从集合中删除最早的观测值，并加入上一个观测值。下面是一个简单的图，它将帮助您更清楚地理解这一点。</p><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/4.png"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们将在数据集上使用这种技术。第一步是创建一个只包含日期和收盘价列的数据框，然后将其拆分为训练集和验证集来验证我们的预测。</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#creating dataframe with date and the target variable</span>data <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>new_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>index<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">,</span> <span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     new_data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>     new_data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#splitting into train and validation</span>train <span class="token operator">=</span> new_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">987</span><span class="token punctuation">]</span>valid <span class="token operator">=</span> new_data<span class="token punctuation">[</span><span class="token number">987</span><span class="token punctuation">:</span><span class="token punctuation">]</span> new_data<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> train<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> valid<span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1235</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">987</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">248</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> valid<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> valid<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2013-10-08 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2017-10-06 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2017-10-09 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2018-10-08 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一步是为验证集创建预测值，并使用真实值来检查RMSE误差。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#make predictions</span>preds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">248</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>train<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">248</span><span class="token operator">+</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> sum<span class="token punctuation">(</span>preds<span class="token punctuation">)</span>    b <span class="token operator">=</span> a<span class="token operator">/</span><span class="token number">248</span>    preds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#calculate rmse</span>rms<span class="token operator">=</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>preds<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rms<span class="token number">104.51415465984348</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仅仅检查RMSE并不能帮助我们评估模型预测效果的。让我们通过做图得到更直观的理解。下面是预测值和实际值的曲线图。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#plot</span>valid<span class="token punctuation">[</span><span class="token string">'Predictions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>valid<span class="token punctuation">[</span><span class="token string">'Predictions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> predsplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">,</span> <span class="token string">'Predictions'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/5.png"></p><h5 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h5><p>RMSE值接近105，但是结果不是很理想(从图中可以看出)。预测值与训练集的观测值的范围相同(开始有上升趋势，然后缓慢下降)。</p><p>在下一节中，我们将使用两种常用的机器学习技术——线性回归和kNN，看看它们在我们的股票市场数据上表现如何。</p><h3 id="3、线性回归"><a href="#3、线性回归" class="headerlink" title="3、线性回归"></a>3、线性回归</h3><h5 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h5><p>在这些数据上可以实现的最基本的机器学习算法是线性回归。线性回归模型生成一个确定自变量和因变量之间关系的方程。</p><p> 线性回归方程可以写成：</p><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/6.png"></p><p>在这里x1, x2, ….xn代表自变量,系数θ1,θ2,….θn代表权重。你可以参考下面的文章来更详细地学习线性回归:</p><ul><li>对于线性回归和Lasso回归的一个综合的初学者指南.</li></ul><p>我们的问题中，没有太多的自变量，只有日期。让我们使用时间（date）列提取特征，如- day, month, year, mon/fri等，然后拟合线性回归模型。</p><h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><p>我们将首先按升序对数据集进行排序，然后创建一个单独的数据集，这样创建的任何新特性都不会影响原始数据。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#setting index as date values</span>df<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">.</span>Date<span class="token punctuation">,</span>format<span class="token operator">=</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>index <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#sorting</span>data <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#creating a separate dataset</span>new_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>index<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">,</span> <span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    new_data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>    new_data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#create features</span><span class="token keyword">from</span> fastai<span class="token punctuation">.</span>structured <span class="token keyword">import</span>  add_datepartadd_datepart<span class="token punctuation">(</span>new_data<span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">)</span>new_data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'Elapsed'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#elapsed will be the time stamp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将创建以下特征：</p><blockquote><p>‘Year’, ‘Month’, ‘Week’, ‘Day’, ‘Dayofweek’, ‘Dayofyear’, ‘Is_month_end’, ‘Is_month_start’, ‘Is_quarter_end’, ‘Is_quarter_start’,  ‘Is_year_end’, and  ‘Is_year_start’.</p></blockquote><p>注意:我使用了来自fastai库的add_datepart。如果您没有安装它，您可以简单地使用命令pip install fastai。您也可以使用python中的简单for循环来创建这些特性。我在下面展示了一个例子。</p><p> 除此之外，我们还可以添加自己的一组特性，我们认为这些特性与预测相关。例如，我的假设是，本周的头几天和最后几天对股票收盘价的影响可能远远超过其他日子。因此，我创建了一个特性来识别给定的一天是星期一/星期五还是星期二/星期三/星期四。这可以用以下几行代码来完成:</p><pre class="line-numbers language-python"><code class="language-python">new_data<span class="token punctuation">[</span><span class="token string">'mon_fri'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>new_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_data<span class="token punctuation">[</span><span class="token string">'Dayofweek'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> new_data<span class="token punctuation">[</span><span class="token string">'Dayofweek'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        new_data<span class="token punctuation">[</span><span class="token string">'mon_fri'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        new_data<span class="token punctuation">[</span><span class="token string">'mon_fri'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是星期日或星期五，列值将为1，否则为0。类似地，您可以创建多个特性。如果你对有助于预测股价的特征有一些想法，请在留言里分享。</p><p>现在我们将把数据分成训练集和验证集来检查模型的性能。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#split into train and validation</span>train <span class="token operator">=</span> new_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">987</span><span class="token punctuation">]</span>valid <span class="token operator">=</span> new_data<span class="token punctuation">[</span><span class="token number">987</span><span class="token punctuation">:</span><span class="token punctuation">]</span>x_train <span class="token operator">=</span> train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'Close'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>y_train <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span>x_valid <span class="token operator">=</span> valid<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'Close'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>y_valid <span class="token operator">=</span> valid<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#implement linear regression</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegressionmodel <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><pre><code>#make predictions and find the rmsepreds = model.predict(x_valid)rms=np.sqrt(np.mean(np.power((np.array(y_valid)-np.array(preds)),2)))rms121.16291596523156</code></pre><p>RMSE值高于之前的方法，这清楚地表明线性回归的表现很差。让我们看看这个图，并理解为什么线性回归预测效果不是很好:</p><pre><code>#plotvalid[&#39;Predictions&#39;] = 0valid[&#39;Predictions&#39;] = predsvalid.index = new_data[987:].indextrain.index = new_data[:987].indexplt.plot(train[&#39;Close&#39;])plt.plot(valid[[&#39;Close&#39;, &#39;Predictions&#39;]])</code></pre><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/7.png"></p><h5 id="推论-1"><a href="#推论-1" class="headerlink" title="推论"></a>推论</h5><p>线性回归是一种简单的技术，很容易解释，但也有一些明显的缺点。使用回归算法的一个问题是，模型过度拟合了日期和月份。模型将考虑一个月前相同日期或一年前相同日期/月的值，而不是从预测的角度考虑以前的值。</p><p>从上图可以看出，2016年1月和2017年1月，股价出现下跌。该模型预测2018年1月也将如此。线性回归技术可以很好地解决像大卖场销售这样的问题，在这些问题中，独立的特征对于确定目标值是有用的。</p><h3 id="4、k-近邻"><a href="#4、k-近邻" class="headerlink" title="4、k-近邻"></a>4、k-近邻</h3><h5 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h5><p>另一个有趣的ML算法是kNN (k近邻)。基于自变量，kNN可以发现新数据点与旧数据点之间的相似性。让我用一个简单的例子来解释这个问题。</p><p>考虑11个人的身高和年龄。根据给定的特征(“年龄”和“身高”)，下表可以用图形形式表示，如下图所示:</p><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/8.png"></p><p>为了确定ID #11的权重，kNN考虑该ID的最近邻居的权重。ID #11的权重被预测为其邻居的平均值。如果我们现在考虑三个邻居(k=3)， ID#11的重量将是= (77+72+60)/3 = 69.66 kg。</p><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/9.png"></p><p>对于kNN的详细了解，可以参考以下文章：</p><ul><li><p>k近邻介绍:简介</p></li><li><p>对k近邻回归算法的实际介绍</p></li></ul><h5 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#importing libraries</span><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> neighbors<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> MinMaxScalerscaler <span class="token operator">=</span> MinMaxScaler<span class="token punctuation">(</span>feature_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上一节中相同的训练和验证集:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#scaling data</span>x_train_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span>x_train <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>x_train_scaled<span class="token punctuation">)</span>x_valid_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x_valid<span class="token punctuation">)</span>x_valid <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>x_valid_scaled<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#using gridsearch to find the best parameter</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'n_neighbors'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">}</span>knn <span class="token operator">=</span> neighbors<span class="token punctuation">.</span>KNeighborsRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>knn<span class="token punctuation">,</span> params<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#fit the model and make predictions</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>preds <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_valid<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#rmse</span>rms<span class="token operator">=</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_valid<span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rms<span class="token number">115.17086550026721</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RMSE值并没有太大的差异，但是一个预测值和实际值的曲线图应该提供一个更清晰的理解。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#plot</span>valid<span class="token punctuation">[</span><span class="token string">'Predictions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>valid<span class="token punctuation">[</span><span class="token string">'Predictions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> predsplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">,</span> <span class="token string">'Predictions'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/10.png"></p><h5 id="推论-2"><a href="#推论-2" class="headerlink" title="推论"></a>推论</h5><p>RMSE值与线性回归模型近似，图中呈现出相同的模式。与线性回归一样，kNN也发现了2018年1月的下降，因为这是过去几年的模式。我们可以有把握地说，回归算法在这个数据集上表现得并不好。</p><p>让我们来看一些时间序列预测技术，看看它们在面对股价预测挑战时的表现。</p><h3 id="5、自动ARIMA"><a href="#5、自动ARIMA" class="headerlink" title="5、自动ARIMA"></a>5、自动ARIMA</h3><h5 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h5><p>ARIMA是一种非常流行的时间序列预测统计方法。ARIMA模型使用过去的值来预测未来的值。ARIMA中有三个重要参数：</p><ul><li><p>p(用来预测下一个值的过去值)</p></li><li><p>q(用来预测未来值的过去预测误差)</p></li><li><p>d(差分的顺序)</p></li></ul><p>ARIMA的参数优化需要大量时间。因此我们将使用自动 ARIMA，自动选择误差最小的(p,q,d)最佳组合。要了解更多关于自动ARIMA的工作原理，请参阅本文：</p><ul><li>利用自动ARIMA建立高性能时间序列模型</li></ul><h5 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pyramid<span class="token punctuation">.</span>arima <span class="token keyword">import</span> auto_arimadata <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>train <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">987</span><span class="token punctuation">]</span>valid <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">987</span><span class="token punctuation">:</span><span class="token punctuation">]</span>training <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span>validation <span class="token operator">=</span> valid<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span>model <span class="token operator">=</span> auto_arima<span class="token punctuation">(</span>training<span class="token punctuation">,</span> start_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> start_q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_p<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_q<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>start_P<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> seasonal<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> D<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> trace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>error_action<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">,</span>suppress_warnings<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>training<span class="token punctuation">)</span>forecast <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>n_periods<span class="token operator">=</span><span class="token number">248</span><span class="token punctuation">)</span>forecast <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>forecast<span class="token punctuation">,</span>index <span class="token operator">=</span> valid<span class="token punctuation">.</span>index<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Prediction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h5><pre class="line-numbers language-python"><code class="language-python">rms<span class="token operator">=</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>forecast<span class="token punctuation">[</span><span class="token string">'Prediction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rms<span class="token number">44.954584993246954</span><span class="token comment" spellcheck="true">#plot</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>forecast<span class="token punctuation">[</span><span class="token string">'Prediction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/.png"></p><h5 id="推论-3"><a href="#推论-3" class="headerlink" title="推论"></a>推论</h5><p>正如我们前面看到的，自动ARIMA模型使用过去的数据来理解时间序列中的模式。利用这些值，该模型捕捉到该系列中的增长趋势。虽然使用这种技术的预测比以前实现的机器学习模型的预测要好得多，但是这些预测仍然与实际值相距甚远。</p><p>从图中可以明显看出，该模型在序列中捕捉到了一种趋势，但忽略了季节的影响。在下一节中，我们将使用一个同时考虑了序列的趋势和季节性的时间序列模型。该模型。</p><h3 id="6、先知（Prophet）"><a href="#6、先知（Prophet）" class="headerlink" title="6、先知（Prophet）"></a>6、先知（Prophet）</h3><h5 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h5><p>有许多时间序列技术可以用在股票预测数据集上，但是大多数技术在拟合模型之前需要大量的数据预处理。Prophet（先知）由Facebook设计和开发，是一个时间序列预测库，不需要数据预处理，并且非常容易实现。先知的输入是一个带有两列的数据框:日期和目标(ds和y)。</p><p>先知试图在过去的数据中捕捉季节性，并且在数据集很大的时候依然表现良好。这里有一篇有趣的文章，用一个简单和直观的方式解释了先知算法：</p><ul><li>使用Facebook的Prophet生成快速准确的时间序列预测</li></ul><h5 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#importing prophet</span><span class="token keyword">from</span> fbprophet <span class="token keyword">import</span> Prophet<span class="token comment" spellcheck="true">#creating dataframe</span>new_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>index<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">,</span> <span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    new_data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>    new_data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>new_data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>new_data<span class="token punctuation">.</span>Date<span class="token punctuation">,</span>format<span class="token operator">=</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>new_data<span class="token punctuation">.</span>index <span class="token operator">=</span> new_data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#preparing data</span>new_data<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'Close'</span><span class="token punctuation">:</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span> <span class="token string">'ds'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#train and validation</span>train <span class="token operator">=</span> new_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">987</span><span class="token punctuation">]</span>valid <span class="token operator">=</span> new_data<span class="token punctuation">[</span><span class="token number">987</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#fit the model</span>model <span class="token operator">=</span> Prophet<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#predictions</span>close_prices <span class="token operator">=</span> model<span class="token punctuation">.</span>make_future_dataframe<span class="token punctuation">(</span>periods<span class="token operator">=</span>len<span class="token punctuation">(</span>valid<span class="token punctuation">)</span><span class="token punctuation">)</span>forecast <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>close_prices<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#rmse</span>forecast_valid <span class="token operator">=</span> forecast<span class="token punctuation">[</span><span class="token string">'yhat'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">987</span><span class="token punctuation">:</span><span class="token punctuation">]</span>rms<span class="token operator">=</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>forecast_valid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rms<span class="token number">57.494461930575149</span><span class="token comment" spellcheck="true">#plot</span>valid<span class="token punctuation">[</span><span class="token string">'Predictions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>valid<span class="token punctuation">[</span><span class="token string">'Predictions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> forecast_valid<span class="token punctuation">.</span>valuesplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'Predictions'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/12.png"></p><h5 id="推论-4"><a href="#推论-4" class="headerlink" title="推论"></a>推论</h5><p>先知(像大多数时间序列预测技术一样)试图从过去的数据中捕捉趋势和季节性。该模型通常在时间序列数据集上表现良好，但在本例中没有达到预期效果。</p><p>事实证明，股票价格没有特定的趋势或季节性。价格的涨跌很大程度上取决于目前市场上的情况。因此，像ARIMA、SARIMA和Prophet这样的预测技术并不能很好地解决这个特殊的问题。</p><p>让我们继续尝试另一种高级技术——长短时记忆网络(LSTM)。</p><h3 id="7、长短期记忆网络-LSTM"><a href="#7、长短期记忆网络-LSTM" class="headerlink" title="7、长短期记忆网络(LSTM)"></a>7、长短期记忆网络(LSTM)</h3><h5 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h5><p>LSTM 算法广泛应用于序列预测问题中，并被证明是一种非常有效的方法。它们之所表现如此出色，是因为LSTM能够存储重要的既往信息，并忽略不重要的信息。</p><p>LSTM有三个门：</p><ul><li><p>输入门：输入门将信息添加到细胞状态</p></li><li><p>遗忘门：它移除模型不再需要的信息</p></li><li><p>输出门：LSTM的输出门选择作为输出的信息</p></li></ul><p>要更详细地了解LSTM及其体系结构，可以阅读下面的文章：</p><ul><li>长短期记忆网络简介</li></ul><p>现在，让我们将LSTM实现为一个黑盒，并检查它在特定数据上的性能。</p><h5 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#importing required libraries</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> MinMaxScaler<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Dropout<span class="token punctuation">,</span> LSTM<span class="token comment" spellcheck="true">#creating dataframe</span>data <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>new_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>index<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">,</span> <span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    new_data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>    new_data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#setting index</span>new_data<span class="token punctuation">.</span>index <span class="token operator">=</span> new_data<span class="token punctuation">.</span>Datenew_data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#creating train and test sets</span>dataset <span class="token operator">=</span> new_data<span class="token punctuation">.</span>valuestrain <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">987</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>valid <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token number">987</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#converting dataset into x_train and y_train</span>scaler <span class="token operator">=</span> MinMaxScaler<span class="token punctuation">(</span>feature_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scaled_data <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>x_train<span class="token punctuation">,</span> y_train <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x_train<span class="token punctuation">.</span>append<span class="token punctuation">(</span>scaled_data<span class="token punctuation">[</span>i<span class="token number">-60</span><span class="token punctuation">:</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y_train<span class="token punctuation">.</span>append<span class="token punctuation">(</span>scaled_data<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x_train<span class="token punctuation">,</span> y_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_train<span class="token punctuation">)</span>x_train <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> <span class="token punctuation">(</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># create and fit the LSTM network</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'mean_squared_error'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#predicting 246 values, using past 60 from the train data</span>inputs <span class="token operator">=</span> new_data<span class="token punctuation">[</span>len<span class="token punctuation">(</span>new_data<span class="token punctuation">)</span> <span class="token operator">-</span> len<span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">60</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuesinputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>inputs  <span class="token operator">=</span> scaler<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>X_test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span>inputs<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    X_test<span class="token punctuation">.</span>append<span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token number">-60</span><span class="token punctuation">:</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>X_test <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>X_test <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> <span class="token punctuation">(</span>X_test<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>X_test<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>closing_price <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>closing_price <span class="token operator">=</span> scaler<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>closing_price<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h5><pre class="line-numbers language-python"><code class="language-python">rms<span class="token operator">=</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>valid<span class="token operator">-</span>closing_price<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rms<span class="token number">11.772259608962642</span><span class="token comment" spellcheck="true">#for plotting</span>train <span class="token operator">=</span> new_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">987</span><span class="token punctuation">]</span>valid <span class="token operator">=</span> new_data<span class="token punctuation">[</span><span class="token number">987</span><span class="token punctuation">:</span><span class="token punctuation">]</span>valid<span class="token punctuation">[</span><span class="token string">'Predictions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> closing_priceplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">,</span><span class="token string">'Predictions'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/03/01/li-yong-shen-du-xue-xi-he-ji-qi-xue-xi-yu-ce-gu-piao-shi-chang/13.png"></p><h5 id="推论-5"><a href="#推论-5" class="headerlink" title="推论"></a>推论</h5><p>哇！LSTM轻松地超越了我们目前看到的任何算法。LSTM模型可以对各种参数进行调优，如改变LSTM层数、增加dropout值或增加训练迭代轮数（epoch）数。但LSTM的预测是否足以确定股票价格将上涨还是下跌?当然不行！</p><p>正如我在文章开头提到的，股价受到公司新闻和其他因素的影响，如公司的非货币化或合并/分拆。还有一些无形的因素往往是无法事先预测的。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>我在写这些文章时意识到时间序列预测是一个非常有趣的领域。在社区中有观点认为这是一个复杂的领域，虽然有一定道理，我还是想说一旦你掌握了基本的技巧，就不难理解它了。</p><p>我对LSTM如何处理其他时间序列的问题很感兴趣，并鼓励您自己也尝试一下。如果你有任何问题，请在下面的留言部分与我联系。</p><h3 id="相关技术名词解释"><a href="#相关技术名词解释" class="headerlink" title="相关技术名词解释"></a>相关技术名词解释</h3><blockquote><p>权重</p><blockquote><p>线性模型中特征的系数，或深度网络中的边。训练线性模型的目标是确定每个特征的理想权重。如果权重为 0，则相应的特征对模型来说没有任何贡献。</p></blockquote></blockquote><blockquote><p>机器学习</p><blockquote><p>机器学习是人工智能的一个分支，是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。<br>Dropout<br>神经网络训练中防止过拟合的一种技术</p></blockquote></blockquote><blockquote><p>参数</p><blockquote><p>在数学和统计学裡，参数（英语：parameter）是使用通用变量来建立函数和变量之间关系（当这种关系很难用方程来阐述时）的一个数量。</p></blockquote></blockquote><blockquote><p>验证集</p><blockquote><p>验证数据集是用于调整分类器超参数（即模型结构）的一组数据集，它有时也被称为开发集(dev set)。</p></blockquote></blockquote><blockquote><p>线性回归</p><blockquote><p>在现实世界中，存在着大量这样的情况：两个变量例如X和Y有一些依赖关系。由X可以部分地决定Y的值，但这种决定往往不很确切。常常用来说明这种依赖关系的最简单、直观的例子是体重与身高，用Y表示他的体重。众所周知，一般说来，当X大时，Y也倾向于大，但由X不能严格地决定Y。又如，城市生活用电量Y与气温X有很大的关系。在夏天气温很高或冬天气温很低时，由于室内空调、冰箱等家用电器的使用，可能用电就高，相反，在春秋季节气温不高也不低，用电量就可能少。但我们不能由气温X准确地决定用电量Y。类似的例子还很多，变量之间的这种关系称为“相关关系”，回归模型就是研究相关关系的一个有力工具。</p></blockquote></blockquote><blockquote><p>长短期记忆网络</p><blockquote><p>长短期记忆(Long Short-Term Memory) 是具有长期记忆能力的一种时间递归神经网络(Recurrent Neural Network)。 其网络结构含有一个或多个具有可遗忘和记忆功能的单元组成。它在1997年被提出用于解决传统RNN(Recurrent Neural Network) 的随时间反向传播中权重消失的问题（vanishing gradient problem over backpropagation-through-time)，重要组成部分包括Forget Gate, Input Gate, 和 Output Gate, 分别负责决定当前输入是否被采纳，是否被长期记忆以及决定在记忆中的输入是否在当前被输出。Gated Recurrent Unit 是 LSTM 众多版本中典型的一个。因为它具有记忆性的功能，LSTM经常被用在具有时间序列特性的数据和场景中。</p></blockquote></blockquote><blockquote><p>遗忘门</p><blockquote><p>LSTM或GRU中特有的机制</p></blockquote></blockquote><blockquote><p>时间序列预测</p><blockquote><p>时间序列预测法其实是一种回归预测方法，属于定量预测，其基本原理是;一方面承认事物发展的延续性，运用过去时间序列的数据进行统计分析，推测出事物的发展趋势；另一方面充分考虑到偶然因素影响而产生的随机性，为了消除随机波动的影响，利用历史数据进行统计分析，并对数据进行适当处理，进行趋势预测。</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> python </tag>
            
            <tag> 单值预测 </tag>
            
            <tag> 量化投资 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费科学上网之Tenon</title>
      <link href="2021/02/28/ke-xue-shang-wang-zhi-tenon/"/>
      <url>2021/02/28/ke-xue-shang-wang-zhi-tenon/</url>
      
        <content type="html"><![CDATA[<center style="    font-size: 26px;    font-weight: bolder;">去中心化VPN</center><center style="    font-size: 26px;">快速安全可靠的将你带入去中心化世界</center><p><img src="/2021/02/28/ke-xue-shang-wang-zhi-tenon/2.png"></p><p><img src="/2021/02/28/ke-xue-shang-wang-zhi-tenon/1.png"></p><p><a href="https://www.tenonvpn.net/zh_CN/index.html" target="_blank">官网地址</a></p><p><a href="https://github.com/tenondvpn/win10/releases/" target="_blank">Win10下载地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tenon </tag>
            
            <tag> 免费 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot 实现文件下载</title>
      <link href="2021/02/28/shi-xian-wen-jian-xia-zai/"/>
      <url>2021/02/28/shi-xian-wen-jian-xia-zai/</url>
      
        <content type="html"><![CDATA[<center style="    font-size: 26px;    font-weight: bolder;">Springboot 实现文件下载</center><p>其实文件下载，不太建议用接口做，因为文件下载一般都是下载一些静态文件，我们可以先将文件处理好，然后通过Nginx 服务下载静态文件，这样速度会快很多。但是这里我们还是写一下。代码也很简单，就一个方法，也写在fileController 类中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/download"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">fileDownLoad</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> String fileName<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span>String token<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>LocalStorage<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStorageData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//解决下载权限问题</span>            <span class="token keyword">return</span> <span class="token string">"无权限下载"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"下载文件不存在"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        response<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentLength</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; fileName="</span><span class="token operator">+</span>  fileName <span class="token operator">+</span><span class="token string">";filename*=utf-8''"</span><span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解决文件名中文问题</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            OutputStream os  <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"下载失败"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"下载成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码也很简单，就是根据文件名判断是否存在文件，不存在就提示没有文件，存在就将文件下载下来。response设置返回文件的格式，以文件流的方式返回，采用utf-8 字符集，设置下载后的文件名。然后就是以文件流的方式下载文件了。</p><p>测试的话也简单，我们启动项目，访问接口<br><a href="http://localhost:9090/zlflovemm/file/download?fileName=11">http://localhost:9090/zlflovemm/file/download?fileName=11</a><br><a href="http://localhost:9090/zlflovemm/file/download?fileName=1.rar">http://localhost:9090/zlflovemm/file/download?fileName=1.rar</a></p><p><img src="/2021/02/28/shi-xian-wen-jian-xia-zai/1.png" alt="测试1"></p><p><img src="/2021/02/28/shi-xian-wen-jian-xia-zai/2.png" alt="测试2"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 文件下载 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一种检查jar是否含有安全漏洞的工具dependency-check</title>
      <link href="2021/02/04/yi-chong-jian-cha-jar-shi-fou-han-you-an-quan-lou-dong-de-gong-ju-dependency-check/"/>
      <url>2021/02/04/yi-chong-jian-cha-jar-shi-fou-han-you-an-quan-lou-dong-de-gong-ju-dependency-check/</url>
      
        <content type="html"><![CDATA[<p>依赖性检查的目的是帮助通知开发人员和安全专业人员Jeff Williams和Arshan Dabirsiaghi在AppSec DC 2012上的主题为“不安全的图书馆的不幸现实”中讨论的问题。演示的要旨是，作为开发社区，我们在包含众所周知的已发布漏洞（例如，国家漏洞数据库）的应用程序中包含第三方库。</p><p>当前，dependency-check是一种用于扫描目录和文件的（java）命令行工具。如果它包含可以扫描特定文件类型的分析器，则将收集有关该文件的信息。然后，此信息用于标识通用平台枚举（CPE）。如果标识了CPE，则在报告中列出相关的常见漏洞和披露（CVE）条目的列表。</p><p>依赖关系检查会使用NIST托管的NVD数据Feed自动更新自身。注意：初始下载数据可能需要五分钟或更长时间。如果该工具至少每7天运行一次，则只需下载一个小的XML文件即可使数据保持最新。</p><p><img src="/2021/02/04/yi-chong-jian-cha-jar-shi-fou-han-you-an-quan-lou-dong-de-gong-ju-dependency-check/1.png" alt="不设置本地镜像结果"></p><p><span style="color:red">注意几个参数</span></p><p>–cveUrlModified 为本地nvd库的url/nvdcve-1.1-modified.json.gz</p><p>–cveUrlBase 为本地nvd库的url/nvdcve-1.1-2020.json.gz</p><p>本地nvd库可以通过apache或nginx自行搭建并上传nvd文件</p><p><img src="/2021/02/04/yi-chong-jian-cha-jar-shi-fou-han-you-an-quan-lou-dong-de-gong-ju-dependency-check/2.png" alt="使用本地镜像执行结果"></p><p>漏洞检查报告如下：</p><p><img src="/2021/02/04/yi-chong-jian-cha-jar-shi-fou-han-you-an-quan-lou-dong-de-gong-ju-dependency-check/3.png" alt="漏洞检查结果"></p><p><span style="color:red;font-weight:bold;font-size:1.5rem">ps:一般针对高危漏洞进行修复</span></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据安全 </tag>
            
            <tag> java </tag>
            
            <tag> dependency-check </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp采坑日记之scroll-view</title>
      <link href="2021/02/03/uniapp-cai-keng-ri-ji-zhi-scroll-view/"/>
      <url>2021/02/03/uniapp-cai-keng-ri-ji-zhi-scroll-view/</url>
      
        <content type="html"><![CDATA[<h3 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h3><p>可滚动视图区域。用于区域滚动。</p><p>需注意在webview渲染的页面中，区域滚动的性能不及页面滚动。</p><pre><code>&lt;scroll-view :scroll-top=&quot;0&quot; scroll-y=&quot;true&quot; :show-scrollbar=&quot;true&quot; :lower-threshold=&quot;50&quot; @scrolltolower=&quot;lower&quot; :style=&quot;&#123; height: scrollH &#125;&quot;&gt;</code></pre><ul><li><span style="color:red;font-size:1.5rem">当scrollH为“100%”时，并不会触发@scrolltoupper、@scrolltolower、@scroll这三个事件 ;</span></li><li><span style="color:red;font-size:1.5rem">当scrollH为绝对值时（例如：100rpx,100vh），@scrolltoupper、@scrolltolower、@scroll这三个事件会触发。</span><br>对于上述结果，官网并没有给出详细的说明</li></ul>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
            <tag> 采坑日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可以产生比特币的浏览器 2021</title>
      <link href="2021/01/31/ke-yi-chan-sheng-bi-te-bi-de-liu-lan-qi/"/>
      <url>2021/01/31/ke-yi-chan-sheng-bi-te-bi-de-liu-lan-qi/</url>
      
        <content type="html"><![CDATA[<center style="    font-size: 26px;    font-weight: bolder;">教你一招用自己的电脑就能简单挖矿的方法：直接用浏览器赚比特币</center><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>当你开着浏览器时就可以免费赚取比特币，特别适合成天开着电脑浏览网页的人，而且<strong>完全免费，完全免费，完全免费</strong>。</p><h5 style="line-height:30px">这么厉害的工具自然是Google 大厂研发出来的。这款产品名为Cryptotab，对于非专业的挖矿业余人员特别友好，特别是当你不知道如何下手，也不知道哪些矿池可以信任的时候，google为你解决了这些问题。</h5><ul><li><p>只要你的工作一直使用电脑</p></li><li><p>只要打开浏览器就可以工作</p></li><li><p>随时随地赚取零花钱</p></li></ul><h5 style="line-height:30px">而这些只需要一个步骤，使用Cryptotab浏览器，功能和界面与google Chrome 完全一致（因为是自家产品），浏览器打开就有源源不断的比特币进来。</h5><h5 style="line-height:30px">欢迎加入比特币简单挖矿的赚钱行列，不用花额外的钱购买设备。</h5><h5 style="line-height:30px">点击<a href="https://cryptotabbrowser.com/18868916" target="_blank">此处</a>就能加入</h5><h5 style="line-height:30px">如果上述地址打不开，请点击此处<a href="https://cryptotabbrowser.com/18868916" target="_blank">备用地址</a>下载</h5><h3 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h3><h5 style="line-height:30px">安装过程很简单，点击下面的按钮进行下载和安装即可</h5><p><img src="/2021/01/31/ke-yi-chan-sheng-bi-te-bi-de-liu-lan-qi/cb%E4%B8%8B%E8%BD%BD.png" alt="下载"></p><h3 id="如何分享"><a href="#如何分享" class="headerlink" title="如何分享"></a>如何分享</h3><h5 style="line-height:30px">CryptoTab浏览器支持10级下限，如果自身电脑算力较低的情况下，可以通过分享自己的专属链接，邀请朋友增强自己的算力，从而建立自己的挖掘网络，邀请链接的位置如下图：</h5><p><img src="/2021/01/31/ke-yi-chan-sheng-bi-te-bi-de-liu-lan-qi/cb%E5%88%86%E4%BA%AB%E9%93%BE%E6%8E%A5.png" alt="分享链接"></p><h3 id="如何获取增加收益"><a href="#如何获取增加收益" class="headerlink" title="如何获取增加收益"></a>如何获取增加收益</h3><h5 style="line-height:30px">邀请越多，算力越强，邀请网络分成比例如下图：</h5><p><img src="/2021/01/31/ke-yi-chan-sheng-bi-te-bi-de-liu-lan-qi/cb%E9%87%87%E7%9F%BF%E5%9B%BE.png" alt="采矿图"></p><h5 style="line-height:30px">可能邀请你的朋友使用该浏览器，如果你自身邀请10个朋友，同时他们每个人也都邀请了10个朋友的话，你每个月(约 3千124万美金  )的收入如下图：</h5><p><img src="/2021/01/31/ke-yi-chan-sheng-bi-te-bi-de-liu-lan-qi/cb%E6%94%B6%E5%85%A5%E5%9B%BE.png" alt="收入图"></p><h5 style="line-height:30px">CryptoTab浏览器与谷歌浏览器Chrome一模一样，而且CryptoTab浏览器性能要比Chrome浏览器快2倍，目前支持windows、ios、android、macos等操作系统。</h5><p><span style="    font-size: 1.5rem;    font-weight: bolder;    color: red;">PS:不懂的科学上网的同学可访回复邮件，该网站将持续更新！！！</span></p>]]></content>
      
      
      <categories>
          
          <category> 数字货币 </category>
          
          <category> 免费挖矿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比特币 </tag>
            
            <tag> 浏览器 </tag>
            
            <tag> 免费挖矿 </tag>
            
            <tag> 免费获取比特币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css实现文本溢出显示省略号</title>
      <link href="2021/01/29/css-shi-xian-wen-ben-yi-chu-xian-shi-sheng-lue-hao/"/>
      <url>2021/01/29/css-shi-xian-wen-ben-yi-chu-xian-shi-sheng-lue-hao/</url>
      
        <content type="html"><![CDATA[<center><h1>css实现文本溢出显示省略号</h1></center><h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><pre><code>p &#123;width: 300px;overflow: hidden;/*文本不会换行*/white-space: nowrap;/*当文本溢出包含元素时，以省略号表示超出的文本*/text-overflow: ellipsis;&#125;</code></pre><p>效果如下：</p><p><img src="/2021/01/29/css-shi-xian-wen-ben-yi-chu-xian-shi-sheng-lue-hao/1.png"></p><h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><ul><li>方法一</li></ul><p>对于多行文本，一种方法是使用webkit的css扩展属性，该方法适用于Safari、chrome和大多数移动端浏览器。</p><pre><code>p &#123;width: 300px;overflow: hidden;/*将对象作为弹性伸缩盒子模型显示*/display: -webkit-box;/*设置子元素排列方式*/-webkit-box-orient: vertical;/*设置显示的行数，多出的部分会显示为...*/-webkit-line-clamp: 3;&#125;</code></pre><p>效果如下：</p><p><img src="/2021/01/29/css-shi-xian-wen-ben-yi-chu-xian-shi-sheng-lue-hao/2.png"></p><ul><li>方法二</li></ul><p>使用伪元素实现，将伪元素放在最后一个字的上方，达到显示省略号的目的。该方法兼容性较好，但文字未超出的情况下也会出现省略号。</p><pre><code>p &#123;position: relative;line-height: 1.2em;max-height: 3.6em;width: 300px;/*设置文本为两端对齐*/text-align: justify;overflow: hidden;&#125; p::after &#123;content: &quot;...&quot;;position: absolute;bottom: 0;right: 0;/*将省略号的大小设置为1个字体大小*/width: 1em;/*设置背景，将最后一个字覆盖掉*/background: #fff;&#125;</code></pre><p>效果如下：</p><p><img src="/2021/01/29/css-shi-xian-wen-ben-yi-chu-xian-shi-sheng-lue-hao/2.png"></p>]]></content>
      
      
      <categories>
          
          <category> css常用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本换行 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何注册google账号</title>
      <link href="2021/01/29/ru-he-zhu-ce-google-zhang-hao/"/>
      <url>2021/01/29/ru-he-zhu-ce-google-zhang-hao/</url>
      
        <content type="html"><![CDATA[<center><h1>如何注册Google账号</h1></center><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>访问如下链接<br><a href="https://www.gmail.com" target="_blank">Google账号注册地址</a><br>点击右上角创建账号图标</p><p><img src="/2021/01/29/ru-he-zhu-ce-google-zhang-hao/1.png" alt="创建账号"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>填写基本信息后点击“下一步”</p><p><img src="/2021/01/29/ru-he-zhu-ce-google-zhang-hao/2.png" alt="基本信息"></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>填写手机号并接收短信短信验证码</p><p><img src="/2021/01/29/ru-he-zhu-ce-google-zhang-hao/3.png" alt="填写手机号"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>填写基本信息</p><p><img src="/2021/01/29/ru-he-zhu-ce-google-zhang-hao/4.png" alt="填写基本信息"></p><p>红框部分必须填写，用于防止万一账号丢失以后恢复账号</p><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>点击同意隐私条款后，账号创建成功</p><p><img src="/2021/01/29/ru-he-zhu-ce-google-zhang-hao/5.png" alt="同意隐私条款"></p>]]></content>
      
      
      <categories>
          
          <category> 国外网站账号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> google账号 </tag>
            
            <tag> 注册国外账号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年免费获取比特币的浏览器</title>
      <link href="2021/01/28/bitcointest/"/>
      <url>2021/01/28/bitcointest/</url>
      
        <content type="html"><![CDATA[<center><h1>2021年免费获取比特币的浏览器</h1></center><h3 id="什么是比特币"><a href="#什么是比特币" class="headerlink" title="什么是比特币"></a>什么是比特币</h3><p>比特币或比特币（₿）是一种加密货币，一种电子现金。它是一种无需中央银行或单一管理员的分散式数字货币，可以在对等比特币网络上从一个用户发送到另一个用户，而无需中介。网络节点通过加密验证交易，并记录在称为区块链的公共分布式分类帐中。比特币是由不知名的人或一群人使用中本聪（Satoshi Nakamoto）的名字发明的，并于2009年作为开源软件发布。比特币是作为对采矿过程的奖励而创建的。它们可以兑换成其他货币，产品和服务。剑桥大学进行的研究估计，2017年<em>，有2.9至580万使用加密货币钱包的唯一用户，其中大多数使用比特币。</em>现在我们在2021年… *</p><p>…（续）请不要对比特币或该浏览器和系统方法持怀疑态度。至少考虑一下…但是很快。</p><p>否则，您将丢弃超过1个或更多的比特币现金（OCT./2021每个硬币价值为：$ 30000 +/-美元）！该系统已经运行了10多年或更长时间。该方法是旧的，但始终在线获得奇妙的结果，对于CRYPTOTAB来说确实很棒！</p><p>成千上万的人已经参加了WORLDWIDE，他们很快就对结果感到惊讶！</p><p>许多人说这是奇迹。但实际上并非如此。这只是一个简单而简单的系统，它应用了《免费团结法》来在线赚钱。稍后，您将了解所有内容。</p><p>有人说，“如果您有所帮助，您将得到帮助，如果您给予，您也将得到帮助。” 这就是规则，并且始终有效。这就是宇宙的运作方式。 </p><p><img src="/2021/01/28/bitcointest/1.png" alt="图片1"></p><h3 id="CryptoTab浏览器"><a href="#CryptoTab浏览器" class="headerlink" title="CryptoTab浏览器"></a>CryptoTab浏览器</h3><p>CryptoTab浏览器（免费更新浏览器，以在自动驾驶仪上赚取比特币）现在！<br>通过遵循这种简单且受信任的MAGIC系统，方法，在3-4周内可以收到数千个CryptoTab推荐，1,000个用户！因为完全免费，所以您实际上无需支付任何费用，相反，您只能接收！我们不强迫任何人进入，安装，当然也不必购买…，因为这仅取决于您！我们仅建议并尝试帮助您极大地改善生活。决定只由您决定！<br>您将要发现的完全是令人难以置信的可能性！想象一下，在接下来的3-4周内，来自世界各地的数千人将通过您的CryptoTab推荐链接免费加入？</p><p>是的，您将从他们自动赚到您的CryptoTab帐户的比特币收益中立即获得2美元或15％…</p><p>如果发生这种情况，即使您不再想要，您也将在线建立巨大的收入。事实是，你不能阻止它。当它开始出现时，您永远不能拒绝它。</p><p>我知道您经常听到很多假项目？这只是魔术方法的清晰版本，带有给定的证明。如果没有，请认真阅读此页，因为从今天开始您生活中的某些事情即将改变！ </p><p>因此，名称是：搜索引擎浏览器“ CyptoTab浏览器”，已更新为免费，自动，无偿地提供给您：比特币！</p><p>它可与Chrome，Firefox和其他浏览器一起使用。也可在所有设备上使用：智能手机，Android，笔记本电脑，台式计算机。只需进行一次注册，即可让All同时工作，从而极大地提高了您的比特币利润（通过CryptoTab规则）！</p><p><img src="/2021/01/28/bitcointest/2.gif" alt="图片2"></p><h3 id="如何推广？"><a href="#如何推广？" class="headerlink" title="如何推广？"></a>如何推广？</h3><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>创建7个CryptoTab推荐账户的列表。</p><p>完成后，然后通过在第7个放置您自己的CryptoTab推荐链接向上推列表。记住，只有通过7个Link加入CryptoTab之后，您才可以这样做。这对于整个系统的最佳性能非常重要：诚实！</p><p>下一个感兴趣的“位用户”将通过您在第7个上的链接进行相同的操作，然后转到第6个；然后，您将转到第6。第6至第5；第5至第4；第4至第3；第3至第2；第2到第1 等，很快，您将被一个也这样做的人推到顶峰，就像您看到的那样！</p><p>现在，您了解了如何在CryptoTab浏览器上快速增长自己的推荐列表和您的比特币！像魔术***！ </p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>以电子邮件格式（网站或博客）推广信息，并发送给至少40人（越多越好）。<br>您还可以在所有社交网络上免费刊登广告，在以下网站上免费建立网页：Tuetego（建立免费文章，做广告），Easyhist4U（建立免费的SplashPage和Rotator），Apsense（建立文章页面，广告等），WebTalk（免费广告等），Markethive（建立免费页面，广告…）以及许多其他功能，例如流量交换，论坛，聊天等。</p><p>*如果您是Joiner（注册），则您的CryptoTab帐户必须置于底部»7位置。接下来将发生的是实际MAGIC！ </p><p>正如了解此系统的人所做的一样，包括您的7个CryptoTab帐户列表将成倍地增加数量。它像野火一样蔓延，没有人能阻止它。当每个人向自己的40位联系人等发送相同的消息时，它就会变得病毒式传播。有些人会尽可能地发送它。</p><p>每次有人加入时，他或她都会是列表中包括您的列表在内的新的CryptoTab浏览器推荐帐户。加入CryptoTab的人数量之多令人难以置信，他们知道这将为他带来很多推荐，而她的推荐就是现金。</p><p><img src="/2021/01/28/bitcointest/3.png" alt="图片3"></p><p>您会收到您邀请的用户开采的15％的加密货币。他们邀请的参与者将带给您10％的收益，依此类推，直到您的网络达到第10级。</p><p>如果每个第一级会员邀请至少两个成员，然后他们邀请更多人，甚至更多，那么您的采矿网络将发展到为您带来稳定且可观的收入的水平。</p><p>它甚至比您的主要职业更赚钱！花一些时间和精力来开发您的采矿网络，您甚至不需要挖掘自己。</p><p>只要至少一名会员处于活动状态，CryptoTab就会支付一定比例的费用！</p><p>我在上面的屏幕截图中显示的只是开始。人们将很快加入，这是不可避免的。它才刚刚开始。</p><p>只要您的CryptoTab帐户仍在整个Internet上，到达数千人的收件箱等的列表中，新推荐的流程就永远不会停止。当数字达到»1时，您现在就退出系统了一条腿。</p><p>请记住，每个加入的人都是您自己的推荐人名单的新起点。当您走上阶梯时，由于将相同消息发送给他们的联系人和朋友的其他人的努力，您将获得很多推荐。 </p><p>什么是单一且简单的单击以将浏览器安装并更新为超级有利润的浏览器？一个伟大的决定！</p><p>如果您只保留一点钱就不能使您变得有钱！但是，如果您放弃它，它确实可以！</p><p>从7级到1级是同时播种的时间。如果您能清楚地看到它，那是其他人为您而不是您。这就是在该系统中应用杠杆作用的力量。该计划中的每个人都将享有相同的机会。</p>]]></content>
      
      
      <categories>
          
          <category> 数字货币 </category>
          
          <category> 免费挖矿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比特币 </tag>
            
            <tag> 浏览器 </tag>
            
            <tag> 免费挖矿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github page 搭建 hexo 博客</title>
      <link href="2021/01/24/hello-world/"/>
      <url>2021/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
